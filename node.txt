1) Uninstall node on mac
https://knowmax3.ultimatix.net/sites/adminhomepage/testsite/visastampinginfo/default.aspx
https://stackoverflow.com/questions/9044788/how-do-i-uninstall-nodejs-installed-from-pkg-mac-os-x

sudo npm uninstall npm -g
sudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*
sudo rm -rf /usr/local/include/node /Users/$USER/.npm
sudo rm /usr/local/bin/node
sudo rm /usr/local/share/man/man1/node.1
sudo rm /usr/local/lib/dtrace/node.d
brew install node

Everyone pls see message from procurement team for MAC,can you please check & update whom its pending next.
 
PRs are processed from my end, now pending with project MAC to check SPOC
 
You may track  and validate the PR details following the below mentioned steps.  
Check the status of the order on the right hand side top of the PR.  
If status shows ordered, go to summary tab, and reference the PO # to ascertain the status with notify.rag@tcs.com
Ultimatix->Applications->Finance & Infrastructure->Procurement Functions -> Procurement Approvals
1.Please login to Procurement Approvals application for MAC approval
2.You will land to Your Worklist
3.All the pending PRs are available under New Request Section.
 
Please note: Batch run occurs within every 2 hrs.

#################################################################################
*[_type == "your_document_type"] {
  _id,
  maxLevel: countObjectsAtDepth(_id, "*[_type == 'your_document_type']"),
}[maxLevel > 0] | order(maxLevel desc)[0]


In this GROQ query:

Replace "your_document_type" with the actual type of your documents that contain nested objects.
_id is used to identify each document uniquely.
countObjectsAtDepth(_id, "*[_type == 'your_document_type']") calculates the maximum level of nesting for each document by counting the number of nested objects at different depths.
[maxLevel > 0] filters out documents that don't have any nested objects.
order(maxLevel desc) sorts the documents based on the maximum level of nesting in descending order.
[0] selects the document with the highest level of nesting (the first document after sorting).
This query will return the document with the highest level of nesting of objects in your specified schema. Adjust the query according to your actual schema structure and data model.

#########################################################################
In Sanity.io schemas, the proper level of nesting for objects depends on several factors, including performance considerations. Here are some guidelines to help determine the appropriate level of nesting for objects in your Sanity.io schema:

Avoid Over-Nesting: Deeply nested objects can lead to complex queries and slower performance, especially when retrieving data. Aim to keep your schema reasonably flat and avoid excessive nesting if possible.

Consider Query Complexity: Think about how your data will be queried and accessed. Shallowly nested structures are generally easier to work with and can lead to more efficient queries.

Use References: Instead of deeply nesting related data within a single document, consider using references to connect related documents. This approach can improve performance by reducing the size of individual documents and simplifying queries.

Denormalize Carefully: While denormalization can improve read performance by reducing the need for joins, be cautious about over-denormalizing. Balance denormalization with the potential for data redundancy and increased storage requirements.

Optimize Query Patterns: Analyze your application's query patterns and optimize your schema structure accordingly. Use GROQ queries efficiently to fetch only the necessary data and avoid over-fetching.

Consider Use Cases: Consider the specific use cases of your application. For example, if you frequently need to access deeply nested data, ensure that your schema supports efficient querying for those scenarios.

Performance Testing: Test the performance of your schema with realistic data and query patterns. Use Sanity.io's tools for performance monitoring and optimization.

By carefully considering these factors and optimizing your schema structure, you can achieve better performance and scalability in your Sanity.io projects.





#################################################
*[_type == "your_document_type" && depth(_id) > 2]

##########################################
*[_id in dataset('your_dataset_name') && _type == "your_document_type" && depth(_id) > 2]

